name: cleanup-workflow-runs
description: Clean up workflow runs
author: Kevin Tijssen (TNO)

inputs:
  workflow_runs_max:
    description: "The maximum amount of workflow runs per workflow file (between 1-100, default 25)."
    default: "25"
    
runs:
  using: "composite"
  steps:
    - name: Cleaning up workflow runs
      shell: bash
      run: |
        # Cleaning up workflow runs
        
        # Limitations:
        # workflow_runs_max has to be between 1 and 100

        # Function that gets the response of the API, validates the response and outputs two variables TOTAL_COUNT and WORKFLOW_RUN_IDS
        get_workflow_runs () {
          # Get the workflow runs for the WORKFLOW_FILENAME. Output is of form "json_payload http_code".
          res=$(curl -s -w "%{http_code}" \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${{ github.token }}" \
                  "https://gdngithub01.gdnnet.lan/api/v3/repos/${GITHUB_REPOSITORY}/actions/workflows/${WORKFLOW_FILENAME}/runs?page=2&per_page=${{ inputs.workflow_runs_max }}")
           
          # Extract http_code and json_payload
          http_code=$(echo "$res" | sed -n '$p')
          json_payload=$(echo "$res" | sed '$d')

          # If http_code == 200, then we extract the total_count and workflow_run_ids. If not, we throw an error and exit.
          if [ $http_code == 200 ]; then
            TOTAL_COUNT=$(echo "${json_payload}" | jq '.total_count')
            WORKFLOW_RUN_IDS=$(echo "${json_payload}" | jq -r '.workflow_runs[].id')
          else
            echo ${json_payload}
            echo "http_code: ${http_code}"
            echo "::error::Unable to retrieve data from GitHub. Please check the logs for more information."
            exit 1
          fi
        }
        
        ### Begin script
        
        # Check if workflow max is a number and is between 1 and 100
        if ! [[ "${{ inputs.workflow_runs_max }}" =~ ^[0-9]+$ ]] || [ "${{ inputs.workflow_runs_max }}" -lt 1 ] || [ "${{ inputs.workflow_runs_max }}" -gt 100 ]; then
          echo "::error::workflow_runs_max has to be a number between 1 and 100. The input was: ${{ inputs.workflow_runs_max }}."
        fi
        
        # Obtain workflow filename
        WORKFLOW_FILENAME=$(echo ${GITHUB_WORKFLOW_REF#*/.github/workflows/} | cut -d '@' -f1)

        get_workflow_runs

        while [ ${TOTAL_COUNT} -gt ${{ inputs.workflow_runs_max }} ]
        do
          for workflow_run_id in ${WORKFLOW_RUN_IDS}; do
            echo "Deleting workflow ${workflow_run_id}"

            curl -s -L \
              -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ github.token }}" \
              "https://gdngithub01.gdnnet.lan/api/v3/repos/${GITHUB_REPOSITORY}/actions/runs/${workflow_run_id}"
          done
          get_workflow_runs
        done

