name: deploy-openshift
description: Deployment to ArgoCD Repo
author: Kevin Tijssen (TNO)

inputs:
  cluster:
    description: "The cluster information. This parameter is required and represents the target cluster for deployment."
    #required: true


runs:
  using: "composite"
  steps:
    - name: Copy kubernetes manifest to ArgoCD
      shell: bash
      run: |

        # # Copy Kubernetes manifest to ArgoCD

        for namespace in $(ls ./kubernetes/kube-artifacts/${{ inputs.cluster }}); do
          ls -la ./kubernetes/kube-artifacts/${{ inputs.cluster }}/${namespace}
          for project in $(ls ./kubernetes/kube-artifacts/${{ inputs.cluster }}/${namespace}); do
            projectName=$(echo ${project} | sed 's/-kubernetes.yaml//g')
            mkdir -p ./argocd/${namespace}/${projectName}
            touch /tmp/after-clone
            sleep 1s
            kube-splitter -f ./kubernetes/kube-artifacts/${{ inputs.cluster }}/${namespace}/${projectName}-kubernetes.yaml -o ./argocd/${namespace}/${projectName}
            find ./argocd/${namespace}/${projectName}/ -type f ! -newer /tmp/after-clone | xargs rm -rvf
          done
        done

    
    # - name: Check ArgoCD Deployments (Dev en Test only)
    #   if: |
    #     (inputs.kustomizeEnv == 'dev' || inputs.kustomizeEnv == 'tst')
    #   shell: bash --noprofile --norc -o pipefail {0}
    #   run: |
    #     # Check ArgoCD Deployments (Dev en Test only)
    #     # Get all projects
    #     projects=$(yq '.projects[].projectName' ${{ inputs.pipelineConfigurationFile }} | paste -sd "," -)

    #     # Switch correct namespace and login
    #     oc project bro-argocd &>/dev/null
    #     argocd login --core &>/dev/null

    #     # Sync all projects
    #     argocd app sync --selector "app.kubernetes.io/name in (${projects}), app.kubernetes.io/environment=${{ inputs.kustomizeEnv }}" &>/dev/null

    #     # Wait 5 seconds for ArgoCD to start syncing
    #     sleep 5s &>/dev/null

    #     # Check if all project are synced and healthy (within 5 minutes)
    #     argocd app wait --selector "app.kubernetes.io/name in (${projects}), app.kubernetes.io/environment=${{ inputs.kustomizeEnv }}" --timeout 300 &>/dev/null

    #     if [ "$?" != "0" ]; then
    #       for APPNAME in $(argocd app list --selector "app.kubernetes.io/name in (${projects}), app.kubernetes.io/environment=tst" -o wide | awk 'NR>1 {print $1}'); do
    #         argocd app get $APPNAME --refresh &>/dev/null
    #       done
          
    #       # Check if all project are synced and healthy (within 5 minutes) again.
    #       argocd app wait --selector "app.kubernetes.io/name in (${projects}), app.kubernetes.io/environment=${{ inputs.kustomizeEnv }}" --timeout 300 &>/dev/null

    #       if [ "$?" != "0" ]; then
    #         echo "ERROR: One or more projects have failed to deploy."
    #         echo
    #         argocd app list --selector "app.kubernetes.io/name in (${projects}), app.kubernetes.io/environment=${{ inputs.kustomizeEnv }}" -o wide | awk 'NR>1 {print $1","$5","$6}' | awk 'BEGIN {print "Name,Status,Health"} {print $1","$2","$3}' | column -t -s $','
    #         exit 1
    #       fi
    #     fi