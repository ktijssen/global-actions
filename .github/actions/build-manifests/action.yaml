name: build-manifests
description: Build Kubernetes/OpenShift manifests
author: Kevin Tijssen (TNO)

inputs:
  applicationName:
    description: "The name of the project. This parameter is optional and represents the name of the project being built."
    required: true
  containerRegistry:
    description: "The URL of the container registry. This parameter allows specifying the container registry where the built container images will be pushed."
    required: true
  gitTag:
    description: "The Git tag to use for the build. This parameter is required and represents the Git tag associated with the project version."
    required: true
  helmVersion:
    description: "The version of Helm used for deploying the Kubernetes manifests. This parameter allows specifying the Helm version to use. The default value is an empty string if not specified."
    required: true
  kustomizeEnvs:
    description: "Comma-separated list of environments for Kustomize. This parameter allows specifying the environments for Kustomize builds."
    default: "dev,tst,acc,int,prd"
  source:
    description: "The path to the Kubernetes manifests directory. This parameter allows specifying the source directory for Kubernetes manifests."
    required: true
  preBuildManifestScript:
    description: "The path to the pre-build script to be executed before starting the Kubernetes manifest build. This script can perform setup tasks or any actions required before the build process begins."
    required: true
  teamName:
    description: "The name of the team associated with the project. This parameter allows specifying the team name."
    required: true


runs:
  using: "composite"
  steps:
    - name: Clean Manifest Directory
      shell: bash --noprofile --norc -o pipefail {0}
      run: |
        # Clean Manifest Directory
        find ~/manifests -mtime +7 -type d | xargs rm -rf &>/dev/null
    - name: Run Pre-Build Script
      shell: bash
      run: |
        # Run Pre-Build Script
        if [ -f "${{ inputs.source }}/${{ inputs.preBuildManifestScript}}" ]; then
          chmod +x ${{ inputs.source }}/${{ inputs.preBuildManifestScript}}
          ${{ inputs.source }}/${{ inputs.preBuildManifestScript}}
        fi
    - name: Generate Helm template
      shell: bash
      if: "${{ inputs.helmVersion != '' }}"
      env: 
        kustomizeEnvs: ${{ inputs.kustomizeEnvs }}
      working-directory: ${{ inputs.source }}/kubernetes
      run: |
        for kustomizeEnv in ${kustomizeEnvs//,/ }; do
          if [ -d "overlays/${kustomizeEnv}" ]; then
            mkdir -p kube-artifacts/${kustomizeEnv}
            for namespacePath in overlays/${kustomizeEnv}/*; do
              namespace=$(echo ${namespacePath} | cut -d '/' -f3)
              helm template ${{ inputs.applicationName }} ./${{ inputs.helmVersion }} -f ./${namespacePath}/values.yaml --namespace ${namespace} --include-crds > ./${namespacePath}/helm-install.yaml
            done
          fi
        done
    - name: Generate Kubernetes YAML
      shell: bash 
      env: 
        kustomizeEnvs: ${{ inputs.kustomizeEnvs }}
      working-directory: ${{ inputs.source }}/kubernetes
      run: |
        # Loop through each environment in the kustomizeEnvs list
        for kustomizeEnv in ${kustomizeEnvs//,/ }; do
          # Check if the overlay directory exists for the current environment
          if [ -d "overlays/${kustomizeEnv}" ]; then
            # Loop through each namespace directory within the current environment
            for namespacePath in overlays/${kustomizeEnv}/*; do
              # Extract the namespace from the namespacePath
              namespace=$(echo ${namespacePath} | cut -d '/' -f3)

              # Copy annotations-labels.yaml to the namespacePath
              cp ${GITHUB_WORKSPACE}/global-actions/securefiles/annotations-labels.yaml ./${namespacePath}/.

              # Navigate to the namespacePath
              cd ./${namespacePath}

              # Add annotations-labels.yaml transformer using kustomize
              kustomize edit add transformer annotations-labels.yaml

              # Navigate back to the previous directory
              cd -  &> /dev/null  

              # Applying build version to Kubernetes manifests
              find . -type f -exec sed -i "s!%IMAGE_VERSION%!${{ inputs.gitTag }}!g" {} \;

              # Applying serviceName to Kubernetes manifests
              find . -type f -exec sed -i "s!%SERVICE_NAME%!${{ inputs.applicationName }}!g" {} \;

              # Applying teamName to Kubernetes manifests
              find . -type f -exec sed -i "s!%TEAM_NAME%!${{ inputs.teamName }}!g" {} \;
              
              # Applying kustomizeEnv to Kubernetes manifests
              find . -type f -exec sed -i "s!%KUSTOMIZE_ENV%!${kustomizeEnv}!g" {} \;

              # Applying container repo to templates based on teamName
              if [ -z ${{ inputs.teamName }} ]; then
                find . -type f -exec sed -i "s!%IMAGE_REPO%/!${{ inputs.teamName }}!g" {} \;
              else
                find . -type f -exec sed -i "s!%IMAGE_REPO%!${{ inputs.teamName }}!g" {} \;
              fi

              # Apply container registry to templates based on containerRegistry
              if [ -z ${{ inputs.containerRegistry }} ]; then
                find . -type f -exec sed -i "s!%IMAGE_HOST%/!${{ inputs.containerRegistry }}!g" {} \;
              else
                find . -type f -exec sed -i "s!%IMAGE_HOST%!${{ inputs.containerRegistry }}!g" {} \;
              fi

              # Apply GitHub Properties to templates
              REPO_NAME=$(echo ${{ github.repository }} | cut -d "/" -f2)
              find . -type f -exec sed -i "s!%GITHUB_URL%!${{ github.server_url }}!g" {} \;
              find . -type f -exec sed -i "s!%GITHUB_REPO%!${{ github.repository }}!g" {} \;
              find . -type f -exec sed -i "s!%GITHUB_REPO_NAME%!${REPO_NAME}!g" {} \;
              find . -type f -exec sed -i "s!%GITHUB_JOB%!${{ github.job }}!g" {} \;
              find . -type f -exec sed -i "s!%GITHUB_RUN_ID%!${{ github.run_id }}!g" {} \;
              find . -type f -exec sed -i "s!%GITHUB_RUN_NUMBER%!${{ github.run_number }}!g" {} \;
              find . -type f -exec sed -i "s!%GITHUB_ORGANIZATION%!${{ github.repository_owner }}!g" {} \;

              # Create a directory for storing generated manifests 
              mkdir -p ~/manifests/${GITHUB_REPOSITORY}/${GITHUB_RUN_ID}/${kustomizeEnv}/${namespace}

              COUNT=1
              SUCCESS=false

              # Generate and save the manifest file for the environment
              echo "Creating manifest '${{ inputs.applicationName }}-kubernetes.yaml' for environment ${kustomizeEnv} (Attempt #$COUNT)."
              while [ $SUCCESS = false ]; do
                  kubectl kustomize ./${namespacePath} --load-restrictor LoadRestrictionsNone --output ~/manifests/${GITHUB_REPOSITORY}/${GITHUB_RUN_ID}/${kustomizeEnv}/${namespace}/${{ inputs.applicationName }}-kubernetes.yaml
                  if [ ! -z "$(cat ~/manifests/${GITHUB_REPOSITORY}/${GITHUB_RUN_ID}/${kustomizeEnv}/${namespace}/${{ inputs.applicationName }}-kubernetes.yaml)" ]; then
                    echo "Created."
                    SUCCESS=true
                  elif [ "$COUNT" -gt "4" ]; then
                      echo "::error::It apears the file '${{ inputs.applicationName }}-kubernetes.yaml' for environment ${kustomizeEnv} wasn't generated correctly as it was empty. Check the source code or re-run the pipeline again"
                      exit 1
                  else
                      COUNT=$(( COUNT+1 ))
                      echo "Failed to create. Retrying... (Attempt #$COUNT)."
                      sleep 5s
                  fi
              done
            done
          fi
        done
