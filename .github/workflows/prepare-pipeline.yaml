name: Pipeline

on:
  workflow_call:
    inputs:
      pipelineConfigurationFile:
        required: true
        type: string
    outputs:
      configJson:
        value: ${{ jobs.pipelineconfig.outputs.configJson }}

jobs:

  pipelineconfig:
    name: Generate Pipeline Configuration
    runs-on: [self-hosted]
    outputs:
      configJson: ${{ steps.mergeConfig.outputs.configJson }}
    steps:
    - name: Clean Workspace
      uses: ktijssen/global-actions/.github/actions/clean-workspace@crystal
    - name: Checkout Project Repo
      uses: actions/checkout@v3
    - name: Checkout Global Actions
      uses: actions/checkout@v3
      with:
        repository: ktijssen/global-actions
        ref: crystal
        path: "global-actions"
    - name: Setup yq
      uses: ktijssen/global-actions/.github/actions/setup-yq@crystal

    - name: Validate Provided YAML file
      shell: bash 
      run: |
        # Validate Provided YAML file
        yq ${{ inputs.pipelineConfigurationFile }} &>/dev/null
    - name: Merge User with Default Config
      shell: bash 
      id: mergeConfig
      run: |
        set -x
        # GENERAL

        ### Create a copy of pipeline.config as pipelineConfiguration.config
        cat ${{ inputs.pipelineConfigurationFile }} > pipelineConfiguration.config

        ## VALIDATION
        # if $(yq '.version._pipelineVersion | (. != "v4")' pipelineConfiguration.config); then
        #   echo "::error::Pipeline not compatible with the current version (v4). Please contact DevOps"
        #   exit 1
        # fi

        # EXTENSION - only new fields (doesn't touch/extend the array inside project)

        ## BUILD
        ### Check if container and/or kubernetes exists 
        if ! $(yq eval '.build | has("container")' pipelineConfiguration.config); then
          CONTAINER=false
        fi
        if ! $(yq eval '.build | has("kubernetes")' pipelineConfiguration.config); then
          KUBERNETES=false
        fi

        ### Delete container and/or kubernetes section
        yq --inplace eval-all 'select(fileIndex==0).build *=n select(fileIndex==1).build | select(fileIndex==0)' pipelineConfiguration.config ./global-actions/securefiles/pipeline.defaults
        if ! $CONTAINER; then
          yq --inplace 'del(.build.container)' pipelineConfiguration.config
        fi
        if ! $KUBERNETES; then
          yq --inplace 'del(.build.kubernetes)' pipelineConfiguration.config
        fi

        ## DEPLOYMENT
        yq --inplace eval-all 'select(fileIndex==0).deployment *=n select(fileIndex==1).deployment | select(fileIndex==0)' pipelineConfiguration.config ./global-actions/securefiles/pipeline.defaults

        # SORTING
        ### Sorting all sections
        yq --inplace eval-all 'sortKeys(.build)' pipelineConfiguration.config
        yq --inplace eval-all 'sortKeys(.build.container)' pipelineConfiguration.config
        yq --inplace eval-all 'sortKeys(.build.kubernetes)' pipelineConfiguration.config
        ### Sorting in to a specific order
        yq --inplace '. |= pick(["name", "build", "deployments", "version"])' pipelineConfiguration.config

        # POST
        ### Convert pipelineConfiguration.config to JSON
        cat pipelineConfiguration.config | yq -o json > pipelineConfiguration.json

        ### Send JSON file to GitHub Output
        echo "configJson=$(jq -c < pipelineConfiguration.json)" >> $GITHUB_OUTPUT
