name: Pipeline

on:
  workflow_call:
    inputs:
      pipelineConfigurationJson:
        required: true
        type: string

jobs:

  build-container:
    name: Build Container
    runs-on: 
    - self-hosted
    if: |
      fromJson(inputs.pipelineConfigurationJson).build.container
    steps:
    - name: Clean Workspace
      uses: ktijssen/global-actions/.github/actions/clean-workspace@crystal
    - name: Checkout Project Repo
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Checkout Global Actions
      uses: actions/checkout@v4
      with:
        repository: ktijssen/global-actions
        ref: crystal
        path: "global-actions"
        show-progress: false
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build Container Image
      uses: ktijssen/global-actions/.github/actions/docker-build-push@crystal
      with:
        command: build
        containerfile: ${{ fromJson(inputs.pipelineConfigurationJson).build.container.containerfileName }}
        context: ${{ fromJson(inputs.pipelineConfigurationJson).build.container.source }}
        name: ${{ fromJson(inputs.pipelineConfigurationJson).name }}
        registry: ${{ fromJson(inputs.pipelineConfigurationJson).build.registry }}
        repo: ${{ fromJson(inputs.pipelineConfigurationJson).build.repo }}

  build-manifests:
    name: Build Kubernetes Manifests
    runs-on: 
    - self-hosted
    env:
      NAME: ${{ fromJson(inputs.pipelineConfigurationJson).name }}
      HELM_VERSION: ${{ fromJson(inputs.pipelineConfigurationJson).build.helmVersion }}
      REGISTRY: ${{ fromJson(inputs.pipelineConfigurationJson).build.registry }}
      REPO: ${{ fromJson(inputs.pipelineConfigurationJson).build.repo }}
      NAMESPACE: ${{ fromJson(inputs.pipelineConfigurationJson).build.kubernetes.namespace }}
      SOURCE: ${{ fromJson(inputs.pipelineConfigurationJson).build.kubernetes.source }}
    steps:
    - name: Clean Workspace
      uses: ktijssen/global-actions/.github/actions/clean-workspace@crystal
    - name: Checkout Project Repo
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Checkout Global Actions
      uses: actions/checkout@v4
      with:
        repository: ktijssen/global-actions
        ref: crystal
        path: "global-actions"
    - name: Setup kubectl
      uses: ktijssen/global-actions/.github/actions/setup-kubectl@crystal
    - name: Setup kustomize
      uses: ktijssen/global-actions/.github/actions/setup-kustomize@crystal
    - name: Setup yq
      uses: ktijssen/global-actions/.github/actions/setup-yq@crystal
    - name: Generate Helm template
      shell: bash
      if: |
        fromJson(inputs.pipelineConfigurationJson).build.helmVersion != ''
      working-directory: ${{ env.SOURCE }}
      run: |
        for overlay in overlays/*; do
          kustomizeEnv=$(echo ${overlay} | cut -d '/' -f2)
          mkdir -p kube-artifacts/${kustomizeEnv}
          for namespacePath in overlays/${kustomizeEnv}/*; do
            namespace=$(echo ${namespacePath} | cut -d '/' -f3)
            helm template ${NAME} ./${HELM_VERSION} -f ./${namespacePath}/values.yaml --namespace ${NAMESPACE} --include-crds > ./${namespacePath}/helm-install.yaml
          done
        done
    - name: Generate Kubernetes YAML
      shell: bash
      working-directory: ${{ env.SOURCE }}
      run: |

        set -x
        # Loop through each environment in the kustomizeEnvs list
        for overlay in overlays/*; do
          kustomizeEnv=$(echo ${overlay} | cut -d '/' -f2)
          # Loop through each namespace directory within the current environment
          for namespacePath in overlays/${kustomizeEnv}/*; do
            # Extract the namespace from the namespacePath
            namespace=$(echo ${namespacePath} | cut -d '/' -f3)

            # Copy annotations-labels.yaml to the namespacePath
            cp ${GITHUB_WORKSPACE}/global-actions/securefiles/annotations-labels.yaml ./${namespacePath}/.

            # Navigate to the namespacePath
            cd ./${namespacePath}

            # Add annotations-labels.yaml transformer using kustomize
            kustomize edit add transformer annotations-labels.yaml

            # Navigate back to the previous directory
            cd -  &> /dev/null  

            # Applying build version to Kubernetes manifests
            find . -type f -exec sed -i "s!%IMAGE_VERSION%!${{ inputs.gitTag }}!g" {} \;

            # Applying serviceName to Kubernetes manifests
            find . -type f -exec sed -i "s!%SERVICE_NAME%!${NAME}!g" {} \;
            
            # Applying kustomizeEnv to Kubernetes manifests
            find . -type f -exec sed -i "s!%KUSTOMIZE_ENV%!${kustomizeEnv}!g" {} \;

            # Applying container repo to templates based on teamName
            if [ -z ${REPO} ]; then
              find . -type f -exec sed -i "s!%IMAGE_REPO%/!${REPO}!g" {} \;
            else
              find . -type f -exec sed -i "s!%IMAGE_REPO%!${REPO}!g" {} \;
            fi

            # Apply container registry to templates based on containerRegistry
            if [ -z ${REGISTRY} ]; then
              find . -type f -exec sed -i "s!%IMAGE_HOST%/!${REGISTRY}!g" {} \;
            else
              find . -type f -exec sed -i "s!%IMAGE_HOST%!${REGISTRY}!g" {} \;
            fi

            # Apply GitHub Properties to templates
            REPO_NAME=$(echo ${{ github.repository }} | cut -d "/" -f2)
            find . -type f -exec sed -i "s!%GITHUB_URL%!${{ github.server_url }}!g" {} \;
            find . -type f -exec sed -i "s!%GITHUB_REPO%!${{ github.repository }}!g" {} \;
            find . -type f -exec sed -i "s!%GITHUB_REPO_NAME%!${REPO_NAME}!g" {} \;
            find . -type f -exec sed -i "s!%GITHUB_JOB%!${{ github.job }}!g" {} \;
            find . -type f -exec sed -i "s!%GITHUB_RUN_ID%!${{ github.run_id }}!g" {} \;
            find . -type f -exec sed -i "s!%GITHUB_RUN_NUMBER%!${{ github.run_number }}!g" {} \;
            find . -type f -exec sed -i "s!%GITHUB_ORGANIZATION%!${{ github.repository_owner }}!g" {} \;

            # Create a directory for storing generated manifests 
            mkdir -p ./kube-artifacts/${kustomizeEnv}/${namespace}

            COUNT=1
            SUCCESS=false

            # Generate and save the manifest file for the environment
            echo "Creating manifest '${NAME}-kubernetes.yaml' for environment ${kustomizeEnv} (Attempt #$COUNT)."
            while [ $SUCCESS = false ]; do
                kubectl kustomize ./${namespacePath} --output ./kube-artifacts/${kustomizeEnv}/${namespace}/${NAME}-kubernetes.yaml
                if [ ! -z "$(cat ./kube-artifacts/${kustomizeEnv}/${namespace}/${NAME}-kubernetes.yaml)" ]; then
                  echo "Created."
                  SUCCESS=true
                elif [ "$COUNT" -gt "4" ]; then
                    echo "::error::It apears the file '${NAME}-kubernetes.yaml' for environment ${kustomizeEnv} wasn't generated correctly as it was empty. Check the source code or re-run the pipeline again"
                    exit 1
                else
                    COUNT=$(( COUNT+1 ))
                    echo "Failed to create. Retrying... (Attempt #$COUNT)."
                    sleep 5s
                fi
            done
          done
        done
    - name: Replacing Secrets
      uses: ktijssen/global-actions/.github/actions/replace-github-secrets@crystal
      with:
        directory: "./kubernetes/kube-artifacts"
        applicationName: ${{ env.NAME }}
        secretContext: ${{ toJson(secrets) }}
        secretPrefix: "github-secret"
    # - name: Check Kyverno Policies
    #   uses: ktijssen/global-actions/actions/kyverno-policies@crystal
    #   with:
    #     applicationName: ${{ matrix.applicationName }}
    - name: Upload Kubernetes manifests as pipeline artifact for further usage
      uses: actions/upload-artifact@v3
      with:
        name: kube-artifacts
        path: ./kubernetes/kube-artifacts
        retention-days: 1
    # - name: Build Manifest
    #   uses: ktijssen/global-actions/actions/build-manifests@crystal
    #   with:
    #     #gitTag: ${{ needs.build.outputs.gitTag }}
    #     applicationName: ${{ fromJson(inputs.pipelineConfigurationJson).name }}
    #     containerRegistry: ${{ fromJson(inputs.pipelineConfigurationJson).build.registry }}
    #     repo: ${{ fromJson(inputs.pipelineConfigurationJson).build.repo }}
    #     source: ${{ fromJson(inputs.pipelineConfigurationJson).build.kubernetes.source }}

    # - name: Replacing Secrets
    #   uses: ktijssen/global-actions/actions/replace-github-secrets@crystal
    #   with:
    #     directory: "./kube-artifacts"
    #     applicationName: ${{ matrix.applicationName }}
    #     secretContext: ${{ toJson(secrets) }}
    #     secretPrefix: "github-secret"
    # - name: Check Kyverno Policies
    #   uses: ktijssen/global-actions/actions/kyverno-policies@crystal
    #   with:
    #     applicationName: ${{ matrix.applicationName }}

  deployToK3D:
    name: Deploy to K3D Cluster (Kubernetes)
    needs: 
      - build-container
      - build-manifests
    if: |
      fromJson(inputs.pipelineConfigurationJson).deployments.k3d.deploy == 'true' &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    runs-on: [self-hosted]
    steps:
    - name: Clean Workspace
      uses: ktijssen/global-actions/.github/actions/clean-workspace@crystal
    - name: Checkout Project Repo
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Check out ArgoCD repository
      uses: actions/checkout@v4
      with:
        repository: ${{ fromJson(inputs.pipelineConfigurationJson).deployments.k3d.argocdRepo }}
        ref: ${{ fromJson(inputs.pipelineConfigurationJson).deployments.k3d.argocdBranch }}
        path: "argocd"
        persist-credentials: true
        show-progress: false
        token: ${{ secrets.PAT_TOKEN }}
    - name: Setup yq
      uses: ktijssen/global-actions/.github/actions/setup-yq@crystal
    - name: Setup kube-splitter
      uses: ktijssen/global-actions/.github/actions/setup-kube-splitter@crystal
    - name: Download Kubernetes Manifest from pipeline artifacts
      uses: actions/download-artifact@v3
      with:
        name: kube-artifacts
        path: ./kubernetes/kube-artifacts
    - name: Deployment to ArgoCD
      uses: ktijssen/global-actions/.github/actions/deploy-kubernetes@crystal
      with:
        cluster: "k3d"
    - name: Push Kubernetes manifest to Argocd
      shell: bash
      working-directory: ./argocd
      run: |
        # Push Kubernetes manifest to ArgoCD
        if [[ $(git status --porcelain | wc -l) -gt 0 ]]; then
          git config --global user.name "GitHub Actions Pipeline"
          git config --global user.email "noreply@tno.nl"
          git add .
          git commit -m "GitHubActions: Update files of project ${{ fromJson(inputs.pipelineConfigurationJson).name }}. GitCommit: ${{ github.sha }}"
          git push
        fi