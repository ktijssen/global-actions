name: Pipeline

on:
  workflow_call:
    inputs:
      pipelineConfigurationJson:
        required: true
        type: string

jobs:

  build-container:
    name: Build Container
    runs-on: 
    - self-hosted
    steps:
    - name: Clean Workspace
      uses: ktijssen/clean-workspace@main
    - name: Checkout Project Repo
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Checkout Global Actions
      uses: actions/checkout@v4
      with:
        repository: ktijssen/global-actions
        ref: crystal
        path: "global-actions"
        show-progress: false
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build Container Image
      uses: ktijssen/actions_docker-build-push@main
      with:
        command: buildAndPush
        containerfile: ${{ fromJson(inputs.pipelineConfigurationJson).containerfileName }}
        context: ${{ fromJson(inputs.pipelineConfigurationJson).source }}
        name: ${{ fromJson(inputs.pipelineConfigurationJson).name }}
        registry: ${{ fromJson(inputs.pipelineConfigurationJson).build.registry }}
        repo: ${{ fromJson(inputs.pipelineConfigurationJson).build.repo }}
        #tags: v0.0.1,${GITHUB_SHA}


    # - name: Build and push
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: "."
    #     file: "Containerfile" 
    #     push: false
    #     tags: ${{ fromJson(inputs.pipelineConfigurationJson).build.repo }}/${{ fromJson(inputs.pipelineConfigurationJson).name }}:latest


  # build-manifests:
  #   name: Build Kubernetes Manifests
  #   runs-on: 
  #   - self-hosted
  #   steps:
    # - name: Build Manifest
    #   if: matrix.skipManifestBuild == 'false'
    #   uses: ktijssen/global-actions/actions/build-manifests@crystal
    #   with:
    #     gitTag: ${{ needs.build.outputs.gitTag }}
    #     applicationName: ${{ matrix.applicationName }}
    #     containerRegistry: ${{ matrix.containerRegistry }}
    #     helmVersion: ${{ matrix.helmVersion }}
    #     source: ${{ matrix.source }}
    #     preBuildManifestScript: ${{ matrix.preBuildManifestScript }}
    #     teamName: ${{ fromJson(needs.pipelineconfig.outputs.configJson).build.teamName }}
    # - name: Replacing Secrets
    #   if: matrix.skipManifestBuild == 'false'
    #   uses: ktijssen/global-actions/actions/replace-github-secrets@crystal
    #   with:
    #     directory: "~/manifests/${GITHUB_REPOSITORY}/${GITHUB_RUN_ID}"
    #     applicationName: ${{ matrix.applicationName }}
    #     secretContext: ${{ toJson(secrets) }}
    #     secretPrefix: "github-secret"
    # - name: Check Kyverno Policies
    #   if: matrix.skipManifestBuild == 'false'
    #   uses: ktijssen/global-actions/actions/kyverno-policies@crystal
    #   with:
    #     applicationName: ${{ matrix.applicationName }}

  # deployToDev:
  #   name: Deploy to Development (OpenShift)
  #   needs: 
  #     - pipelineconfig
  #     - container-manifests
  #   if: |
  #     fromJson(needs.pipelineconfig.outputs.configJson).build.type == 'container' &&
  #     fromJson(needs.pipelineconfig.outputs.configJson).deployment.dev.deploy == 'true' &&
  #     (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
  #     !contains(needs.*.result, 'failure') &&
  #     !contains(needs.*.result, 'cancelled')
  #   runs-on: [self-hosted]
  #   steps:
  #     - name: Clean Workspace
  #       uses: ktijssen/global-actions/actions/cleanup-workspace@crystal
  #     - name: Checkout Project Repo
  #       uses: actions/checkout@v3
  #     - name: Deployment to OpenShift
  #       uses: ktijssen/global-actions/actions/deploy-openshift@crystal
  #       with:
  #         argocdAccessToken: ${{ secrets.ACCESS_TOKEN }}
  #         argocdBranch: ${{ fromJson(needs.pipelineconfig.outputs.configJson).deployment.dev.argocdBranch }}
  #         argocdRepo: ${{ fromJson(needs.pipelineconfig.outputs.configJson).deployment.dev.argocdRepo }}
  #         cluster: "dev"
  #         kustomizeEnv: "dev"
  #         pipelineConfigurationFile: ${{ inputs.pipelineConfigurationFile }}
