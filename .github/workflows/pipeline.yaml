name: Pipeline

on:
  workflow_call:
    inputs:
      pipelineConfigurationJson:
        required: true
        type: string

jobs:

  build-container:
    name: Build Container
    runs-on: 
    - self-hosted
    steps:
    - name: Clean Workspace
      uses: ktijssen/global-actions/.github/actions/clean-workspace@crystal
    - name: Checkout Project Repo
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Checkout Global Actions
      uses: actions/checkout@v4
      with:
        repository: ktijssen/global-actions
        ref: crystal
        path: "global-actions"
        show-progress: false
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build Container Image
      uses: ktijssen/global-actions/.github/actions/docker-build-push@crystal
      with:
        command: build
        containerfile: ${{ fromJson(inputs.pipelineConfigurationJson).build.container.containerfileName }}
        context: ${{ fromJson(inputs.pipelineConfigurationJson).build.container.source }}
        name: ${{ fromJson(inputs.pipelineConfigurationJson).name }}
        registry: ${{ fromJson(inputs.pipelineConfigurationJson).build.registry }}
        repo: ${{ fromJson(inputs.pipelineConfigurationJson).build.repo }}

  build-manifests:
    name: Build Kubernetes Manifests
    runs-on: 
    - self-hosted
    env:
      NAME: ${{ fromJson(inputs.pipelineConfigurationJson).name }}
      HELM_VERSION: ${{ fromJson(inputs.pipelineConfigurationJson).build.helmVersion }}
      NAMESPACE: ${{ fromJson(inputs.pipelineConfigurationJson).build.kubernetes.namespace }}
      SOURCE: ${{ fromJson(inputs.pipelineConfigurationJson).build.kubernetes.source }}
    steps:
    - name: Clean Workspace
      uses: ktijssen/global-actions/.github/actions/clean-workspace@crystal
    - name: Checkout Project Repo
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Generate Helm template
      shell: bash
      if: |
        fromJson(inputs.pipelineConfigurationJson).build.helmVersion != ''
      working-directory: ${SOURCE}
      run: |
        for overlay in overlays/*; do
          kustomizeEnv=$(echo ${overlay} | cut -d '/' -f2)
          helm template ${NAME} ./${HELM_VERSION} -f ./overlays/${kustomizeEnv}/values.yaml --namespace ${NAMESPACE} --include-crds > ./overlays/${kustomizeEnv}/helm-install.yaml
        done
    - name: Generate Kubernetes YAML
      shell: bash
      working-directory: ${SOURCE}
      run: |
        mkdir -p kube-artifacts
        for overlay in overlays/*; do
          kustomizeEnv=$(echo ${overlay} | cut -d '/' -f2)
          kubectl kustomize ./overlays/${kustomizeEnv} > ./kube-artifacts/${NAME}-${kustomizeEnv}-kubernetes.yaml
        done
    # - name: Build Manifest
    #   uses: ktijssen/global-actions/actions/build-manifests@crystal
    #   with:
    #     #gitTag: ${{ needs.build.outputs.gitTag }}
    #     applicationName: ${{ fromJson(inputs.pipelineConfigurationJson).name }}
    #     containerRegistry: ${{ fromJson(inputs.pipelineConfigurationJson).build.registry }}
    #     repo: ${{ fromJson(inputs.pipelineConfigurationJson).build.repo }}
    #     source: ${{ fromJson(inputs.pipelineConfigurationJson).build.kubernetes.source }}

    # - name: Replacing Secrets
    #   uses: ktijssen/global-actions/actions/replace-github-secrets@crystal
    #   with:
    #     directory: "~/manifests/${GITHUB_REPOSITORY}/${GITHUB_RUN_ID}"
    #     applicationName: ${{ matrix.applicationName }}
    #     secretContext: ${{ toJson(secrets) }}
    #     secretPrefix: "github-secret"
    # - name: Check Kyverno Policies
    #   uses: ktijssen/global-actions/actions/kyverno-policies@crystal
    #   with:
    #     applicationName: ${{ matrix.applicationName }}

  # deployToDev:
  #   name: Deploy to Development (OpenShift)
  #   needs: 
  #     - pipelineconfig
  #     - container-manifests
  #   if: |
  #     fromJson(needs.pipelineconfig.outputs.configJson).build.type == 'container' &&
  #     fromJson(needs.pipelineconfig.outputs.configJson).deployment.dev.deploy == 'true' &&
  #     (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
  #     !contains(needs.*.result, 'failure') &&
  #     !contains(needs.*.result, 'cancelled')
  #   runs-on: [self-hosted]
  #   steps:
  #     - name: Clean Workspace
  #       uses: ktijssen/global-actions/actions/cleanup-workspace@crystal
  #     - name: Checkout Project Repo
  #       uses: actions/checkout@v3
  #     - name: Deployment to OpenShift
  #       uses: ktijssen/global-actions/actions/deploy-openshift@crystal
  #       with:
  #         argocdAccessToken: ${{ secrets.ACCESS_TOKEN }}
  #         argocdBranch: ${{ fromJson(needs.pipelineconfig.outputs.configJson).deployment.dev.argocdBranch }}
  #         argocdRepo: ${{ fromJson(needs.pipelineconfig.outputs.configJson).deployment.dev.argocdRepo }}
  #         cluster: "dev"
  #         kustomizeEnv: "dev"
  #         pipelineConfigurationFile: ${{ inputs.pipelineConfigurationFile }}
